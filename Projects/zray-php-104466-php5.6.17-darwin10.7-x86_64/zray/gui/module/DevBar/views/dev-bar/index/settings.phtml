<?php $this->headScript ()->appendFile ( $this->basePath () . '/js/FragmentManager.js' );?>
<?php $this->headScript ()->appendFile ( $this->basePath () . '/js/Spinner.js' );?>
<?php $this->headScript ()->appendFile ( $this->basePath () . '/js/zgridPolling.js' );?>
<?php $this->headLink()->appendStylesheet("{$this->basePath()}/css/logs.css") ?>
<?php $this->headLink()->appendStylesheet("{$this->basePath()}/css/admin.css") ?>
<?php $this->headLink()->appendStylesheet("{$this->basePath()}/css/spinner-input.css") ?>


<script type="text/javascript">
var devBarAllowed = <?php echo $devBarAllowed ? 'true' : 'false' ?>;
var devbarEnabled = <?php echo $devbarEnabled ? 'true' : 'false' ?>;
var devbarMode = <?php echo intval($devbarMode) ?>;
var devbarChanged = false;
var tokensDisabled = false;
var devbarObject = null;
var useZRaySecureMode = <?php echo $useZRaySecureMode ? 'true' : 'false' ?>;

window.addEvent('load', function(){
	window.fireEvent('resize',{});
	$$('#new-tabs-container li').addEvent('click', function() {
		showSection(this);
	});
});

function hideTabSection(sectionId) {
	$$('li[section="' + sectionId + '"]').setStyle('display', 'none');
	$$('li[section="' + sectionId + '"]').setStyle('border', '0');
}

window.addEvent("domready", function() { 

	<?php if (! $this->isAllowedIdentity('route:ConfigurationWebApi', 'configurationStoreDirectives')): ?>
	$$('#devbar-granularity input').set('disabled', true);
	$$('#devbar-privacy-settings input').set('disabled', true);
	$$('#devbar-settings input').set('disabled', true);

	$$('.settings-section input[type="submit"]').dispose();
	<?php endif; ?>
	
	<?php if (isset($panel)) : ?>
		<?php if ($panel == 'settings') : ?>
		hideTabSection('devbar-access');
		hideTabSection('devbar-tokens');
		<?php else : ?>
		$$('.settings-section').setStyle('display', 'none');
		$$('.settings-section').setStyle('border', '0');
		$('new-tabs-container').setStyle('display', 'none');
		<?php endif; ?>
	$('section-devbar-<?php echo $panel; ?>').setStyle('display', 'block');
	<?php endif; ?>
});

window.addEvent("load", function() {
	
	$$('label[for="cleanUpLabel"]').addClass('settings-desc');
	if ($('cleanUpLabel')) {
		$('cleanUpLabel').setStyle('display', 'none');
	}

	<?php if ($azure || $zrayStandalone) : ?>
	$('zray.zendserver_ui_url').getParent('tr').setStyle('display', 'none');
	$('zray.zendserver_ui_url').getParent('tr').getNext('tr').setStyle('display', 'none');
	<?php endif; ?>
	
	disablAattributeMaskingListIfNeeded();

	// add event on selection 'Yes'
	$('zray.enable_attribute_masking').addEvent('change', function(item) {
		disablAattributeMaskingListIfNeeded();
	});

	// add event on selection 'No'
	$$('input[name="zray.enable_attribute_masking"][value="0"]').addEvent('change', function(item) {
		disablAattributeMaskingListIfNeeded();
	});

	/// set up polling for waiting for tasks to be completed
	var polling = new zGridPolling();
	<?php if (!$azure && !$zrayStandalone) : ?>
	var tasksRequest = new Request.WebAPI({url: '<?php echo $this->basepath('/Api/tasksComplete') ?>'});

	tasksRequest.addEvent('success', function(response){
		if (response.responseData.tasksComplete) {
			polling.fireEvent('tasksComplete');
		}
	});
	
	tasksRequest.addEvent('complete', function(response){
		if (response.responseData && ! response.responseData.tasksComplete) {
			polling.next();
		} else {
			polling.stop();
		}
	});
	
	polling.addEvent('poll', function(){
		tasksRequest.get();
	});
	<?php endif; ?>

	polling.addEvent('tasksComplete', function(){
		var restartRequest = new Request.WebAPI({url: '<?php echo $this->basepath('/Api/restartPhp') ?>'});
		restartRequest.post({force: 'TRUE'});
	});
	
	if (! devBarAllowed) {
		$$('.notification-devbar-free').show();
		$$('#devbar-settings input').set('disabled', true);
	} else {
		$$('.notification-devbar-free').hide();
	}

	if (! useZRaySecureMode) {
		$$('input[name="zray.enable"][value="2"]').set('disabled', true);
		if ($('secured-not-available-warning')) {
			$('secured-not-available-warning').removeClass('hidden');
		}
	}

	$$('#section-devbar-settings input[type="submit"]').addEvent('click', function(event) {
		event.target.spin();
		saveDevBarSettings(event.target.getParent('form'));
	});

	$$('#section-devbar-data-privacy input[type="submit"]').addEvent('click', function(event) {
		event.target.spin();
		saveDevBarSettings(event.target.getParent('form'));
	});

	$$('#section-devbar-data-granularity input[type="submit"]').addEvent('click', function(event) {
		event.target.spin();
		saveDevBarSettings(event.target.getParent('form'));
	});

	var fragment = new FragmentManager();
	fragmentObject = fragment.getFragmentObject();
	if (fragmentObject['panel'] != undefined && $('panel-' + fragmentObject['panel'])) {
		$('panel-' + fragmentObject['panel']).click();
	} else {
		// click on the first element
		showSection($$('#new-tabs-container li')[0]);
	}
	
	<?php if (isset($panel) && $panel == 'settings') : ?>
	$$('li[section="devbar-data-granularity"]').pick().click();
	<?php endif; ?>
	
	document.fireEvent('modeChanged', {'mode': devbarMode});
}); /// end load event


// display "restart" notification for "Z-Ray standalone", 
// where we don't have control over server's restart
function displayStrictRestartNotification() {
	var simpleModal = new SimpleModal({
		width: 673, 
		closeButton: false, 
		hideHeader: false, 
		hideFooter: false, 
		draggable: false, 
		overlayClick: false,
		template: "<div id=\"simple-modal-box\"><div class=\"simple-modal-header wizard-title\" style=\"display:block;\">{_TITLE_}</div>"+
				"<div class=\"simple-modal-body\">{_CONTENTS_}</div>"+
				"<div class=\"simple-modal-footer\"></div>"+
				"</div>"
	});	
	
	simpleModal.addButton("<?php echo _t("Ok") ?>", "btn primary", function() {
		this.hide();
	}.bind(simpleModal));
	
	simpleModal.show({
		"model": "modal",
		"title": 'Web server restart is required', 
		"contents": '<strong>Your new settings have been saved.</strong><br/><br/>To apply the changes, please manually <u>restart your web server</u>.'
	});
}

function saveDevBarSettings(item, successCallback) {
	var form = item;
	var directives = form.toObj();

	// not for submit
	if (directives['cleanUpLabel'] != undefined ) {
		delete directives['cleanUpLabel'];
	}
	
	if (directives['zray.enable'] == '1') {
		directives['zray.disable_injection'] = ($$('input[name="zray.disable_injection"]').pick().get('checked')) ? '0' : '1';
		directives['zray.disable_actions'] = ($$('input[name="zray.disable_actions"]').pick().get('checked')) ? '0' : '1';
	}
	
	if (directives['zray.zendserver_ui_url']) {
		
		var validateUrl = new URI(directives['zray.zendserver_ui_url'],{'base': baseUrl()});

		if (validateUrl.get('directory') != '/ZendServer') {
			validateUrl.set('file', '');
			validateUrl.set('directory', '/ZendServer');
		}

		if ( ! validateUrl.get('port')) {
			if (validateUrl.get('scheme') == 'https') {
				validateUrl.set('port', '<?php echo $securedGuiPort ?>');
			} else {
				validateUrl.set('port', '<?php echo $defaultGuiPort ?>');
			}
		}
		
		$('zray.zendserver_ui_url').set('value', validateUrl.toString());
		
		directives['zray.zendserver_ui_url'] = validateUrl.toString();
	}
	
	var url = '<?php echo "{$this->basePath('/Api/configurationStoreDirectives')}" ?>';
	var request = new Request.WebAPI({
		url: url,
		'version': '1.6',
		onSuccess: function(response) {
			<?php if ($zrayStandalone) { ?>
			displayStrictRestartNotification();
			<?php } else { ?>
			document.fireEvent('toastNotification', {'message': '<?php echo _t("Your new settings have been saved"); ?>'});
			<?php } ?>
			
			<?php if (!$azure && !$zrayStandalone) : ?>
			if (successCallback) {
				successCallback();
			}
			<?php else : ?>
			form.getElements('input').unspin();
			<?php endif; ?>
			
		}.bind(form),
		onComplete: function(){
			if ( ! successCallback) {
				/// success callback means that someone else will unspin the button
				form.getElements('input').unspin();
			}
			
			// remove the error message
			$('form-error-message') && $('form-error-message').destroy();
		},
		onFailure: function(response) {
			try {
				response = this.decodeResponse(response);
			} catch (e) {
				response = {
					'errorData': {
						'errorMessage': 'Server error: bad response from the server',
					}
				}
			}
			
			if (response && response.errorData && response.errorData.errorMessage) {
				var errorElement = $('form-error-message');
				if (!errorElement) {
					
					// get current selected section
					var currentSection = null;
					[].forEach.call(document.querySelectorAll('.settings-section'), function(el) {
						if (el.style.display != 'none') {
							currentSection = el;
						}
					});
					
					// add the error element to the top of the page
					if (currentSection) {
						errorElement = document.createElement('div');
						errorElement.setAttribute('id', 'form-error-message');
						errorElement.setAttribute('class', 'warningTopMessage');
						errorElement.textContent = response.errorData.errorMessage;
						
						if (currentSection.firstChild) {
							currentSection.insertBefore(errorElement, currentSection.firstChild);
						} else {
							currentSection.appendChild(errorElement);
						}
					}
				}
				
			}
		}
	});
	
	request.post({'directives': directives});

	if (directives['zray.enable']) {
		devbarMode = directives['zray.enable'];
		document.fireEvent('modeChanged', {'mode': devbarMode})
	}
}



window.addEvent('resize', function(){

	var windowHeight = window.getSize().y;
	var topHeight = $('topbar').getSize().y + $('bread-wrp').getSize().y;

	var logDisplayDimensions = $('log_display').getComputedSize({styles: ['padding','border','margin']});
	var extrasDifference = logDisplayDimensions.totalWidth - logDisplayDimensions.width;
});


function showSection(current) {
	<?php if (isset($panel) && $panel != 'settings') : ?>
	return;
	<?php endif; ?>
	$$('#new-tabs-container li').removeClass('active').removeClass('selected');
	section = current.get('section');
	
	current.addClass('selected active');
	
	$$('.settings-section').setStyle('display', 'none');
	$('section-' + section).setStyle('opacity', '0');
	$('section-' + section).setStyle('display', 'block');
	$('section-' + section).tween('opacity', '1');

	sectionChanged(section);
	window.location.hash = 'panel=' + section;
	window.fireEvent('resize',{});
}

function sectionChanged(section) {
	switch (section) {
		case 'notification-center':
		case 'audit-trail':
			var mailUsername = $$('input[name="zend_gui.mail_username"]').pick();
			if (mailUsername && mailUsername.get('value').length > 0) {
				$$('.notification-mail-not-configured').setStyle('display', 'none');
			} else {
				$$('.notification-mail-not-configured').setStyle('display', 'block');
			} 
			break;
	}
}

function getHtmlForTokenDisplay(iprange, expires, baseUrl, hash, title, wrapperId, wrapperClass) {

	var html = '<div id="{wrapperId}" class="{wrapperClass}">';
	if (hash != '') {
    	html += '<h3>{tokenCopyMessage}</h3>\
    		<div id="tokenURL"><span class="selectable">{tokenPrefix}{token}</span>\
    		<div class="zdb-copy-img" title="Copy to clipboard" onclick="window.prompt(\'Press CTRL+C, then ENTER\', this.parentNode.getElements(\'span\').pick().innerHTML);"></div></div>\
    		';
	}
	html += '<h3>{headline}</h3>{content}</div>';

	var tokenPrefix = '?zsdbt=';
	var limited = '';
	var tokenCopyMessage = '';

	var tokenHeadline = title;
	
	if (iprange) {
		iprange = _t('IP: This token can only be accessed from these IP ranges: {iprange}', {'iprange': '<span class="details">'+iprange+'</span>'}); // TRANSLATE
		limited = 'limited';
	} else {
		iprange = _t('IP: This token can be used to connect from any origin IP'); // TRANSLATE
		limited = '';
	}

	iprange = '<li class="{limited}">{iprange}</li>'.substitute({'iprange': iprange, 'limited': limited});

	if (baseUrl) {
		tokenPrefix = baseUrl + '?zsdbt=';
		baseUrl = _t('URL: This token can be used to access Z-Ray on: {baseUrl}', {'baseUrl': '<span class="details">'+baseUrl+'</span>'}); // TRANSLATE
		tokenCopyMessage = '<?php echo _t('To use Z-Ray, copy this URL and paste in your browser.')?>';
		limited = 'limited';
	} else {
		tokenCopyMessage = '<?php echo _t('To use Z-Ray, add this token to the page URL.')?>';
		baseUrl = _t('URL: This token can be used to access Z-Ray on any URL on this server'); // TRANSLATE
		limited = '';
	}
	baseUrl = '<li class="{limited}">{baseUrl}</li>'.substitute({'baseUrl': baseUrl, 'limited': limited});

	if (expires) {
		if (new Date(expires*1000) > new Date()) {
			expires = _t('Time Duration: This token expires on: {expires}', {'expires': '<span class="details">'+formatDate(expires)+'</span>'});
		} else {
			expires = _t('Time Duration: This token has expired');
		}
		limited = 'limited';
	} else {
		expires = '';
		limited = '';
	}
	expires = '<li class="{limited}">{expires}</li>'.substitute({'expires': expires, 'limited': limited});

	var content = '<ul>{baseUrl}{iprange}{expires}</ul>'.substitute({'baseUrl': baseUrl, 'iprange': iprange, 'expires': expires});
	var rowContent = html.substitute({'content': content,
		'headline': '<?php echo _t('Token Restrictions') ?>','tokenPrefix': tokenPrefix, 
		'token': hash, 'tokenCopyMessage': tokenCopyMessage,
		'wrapperClass': wrapperClass, 'wrapperId': wrapperId}); // TRANSLATE

	return rowContent;
}

function disablAattributeMaskingListIfNeeded() {
	if ($('zray.enable_attribute_masking').get('checked') == false) {
		$('zray.attribute_masking_list').set('disabled', true);
	} else {
		$('zray.attribute_masking_list').set('disabled', false);
	}
}

</script>


<div id="bread-wrp">
	<div id="bread">
	   <div class="glyphicons bread-info-btn">
            <i></i>
            <div class="page-description-content-wrapper">
                <div class="triangle"></div>
                <div class="page-description-content" style="width: 700px;">
                <table>
                    <tr>
                        <td>
                            <?php
                                if (isAzureEnv() || isZrayStandaloneEnv()) { 
                                    if ($panel == 'settings') {
                                        echo _t('Z-Ray\'s advanced settings are used to configure the way request information is tracked and displayed in Z-Ray, while the privacy settings allow easy configuration of information masking.');
                                    } elseif ($panel == 'tokens') {
                                        echo _t('Selective Access guarantee safe and secure access to Z-Ray in production. Using tokens, access to Z-Ray can be restricted according to IP, URL, and for a specific time duration.');
                                    } else { // access
                                        echo _t('Z-Ray can be used safely both in development and production. The Z-Ray access modes determine which pages located on the web server Z-Ray is displayed on. In development, Z-Ray can be enabled on all pages located on the web server. In production, the Selective mode restricts access to Z-Ray to URLs containing an access token.');
                                    }
                                } else {
                                    echo _t('Z-Ray monitors requests made to the Web server, and displays relevant, live and detailed information on a Web page component in your browser.  This information includes: request execution time,  events, log entries, database queries, functions, and more. Using Z-Ray, developers get real insight into their PHP code, allowing them to inspect, debug and optimize their pages, resulting in fast and stable applications. Z-Ray also tracks non-browser based requests (API requests, web services and mobile requests), and displays related information in Zend Server, on the Z-Ray Live! page.<br/>
                            		      %sread more%s', array("<a href=\"{$this->helplink('z-ray_concept')}\" target=\"_blank\">",'</a>'));
                                }
                            ?>
                        </td>
                        <td>
                            <div class="video-box video-box-tiny" href="http://www.zend.com/server/redirect/z-ray-overview?ecat=breadcrumbs&amp;eaction=Z-Ray Overview">
							     <img src="<?php echo $this->basePath(); ?>/images/welcome/videos/z-ray-overview-screen.png">
							</div>
                        </td>
                    </tr>
                </table>
            	</div>
        	</div>
        </div>
		<?php if (!isZrayStandaloneEnv()) { ?>
		<ul>
			<li><a href="<?php echo $this->url('default', array('controller' => 'ZrayLive')) ?>"><?php echo _t("Z-Ray") ?></a></li>
		</ul>
		<?php } ?>
	</div>
</div>

<div id="content_container">
<div id="log_display" class="log_display float-left new-tabs">
	<nav id="new-tabs-container">
		<ul>
			<li section="devbar-data-granularity" class="diagonal-tab active hidden">Data Collection</li>
			<li section="devbar-data-privacy" class="diagonal-tab hidden">Privacy</li>
			<li section="devbar-settings" class="diagonal-tab hidden">Advanced</li>
		</ul>
	</nav>
	
	
	<div id="log_display" class="log_display float-left">
		<h2 class="limitedTopMessage notification-devbar-free hidden"><?php echo _t('Z-Ray is not available in the Free edition. For information on other available editions, '); ?><a href="<?php echo $this->helpLink('zend_server_editions'); ?>" target="_blank"><?php echo _t('click here'); ?></a></h2>
		<div class="settings-section" id="section-devbar-data-granularity">
		<?php echo $this->zendSettings($devBarGranularityForm); ?>
		</div>
		<div class="settings-section" id="section-devbar-data-privacy">
		<?php echo $this->zendSettings($devBarDataPrivacyForm); ?>
		</div>
		<div class="settings-section" id="section-devbar-settings">
		<?php echo $this->zendSettings($devBarSettingsForm); ?>
		</div>
		
	</div>
</div>
</div>
