<script type="text/javascript">
(function() {
    
	var tools = {
		'formatLabel': function(label) {
			return label.replace(/[a-z][A-Z]/g, function(camelPair){
				return camelPair.substring(0,1) + ' ' + camelPair.substring(1,2);
			}).toLowerCase().replace(/\b[a-z]/g, function(letter) {
			    return letter.toUpperCase();
			})
		},
		'isTreeTable': function(data) {
			var returnValue = false;
			jQuery.each(data, function(rowKey, rowValue) {
				if (rowValue != null) {
					if (Object.prototype.toString.apply(rowValue) == '[object Array]' || Object.prototype.toString.apply(rowValue) == '[object Object]') {
            			jQuery.each(rowValue, function(key, value) {
            				if (Object.prototype.toString.apply(value) == '[object Array]' || Object.prototype.toString.apply(value) == '[object Object]') {
            					returnValue = key;
            					return;
            				}
            			});
					}
				}
			});

			return returnValue;
		},
		'isGeneralTreeTable': function(data, structure) {
			var result = true;
			jQuery.each(data, function(key, value) {
				if (Object.prototype.toString.apply(value) == '[object Array]' || Object.prototype.toString.apply(value) == '[object Object]') {
    				if (JSON.stringify(structure) != JSON.stringify(Object.keys(value))) {
    					result = false;
    					return false;
    				}
				}

				jQuery.each(value, function(colKey, colValue) {
    				if (Object.prototype.toString.apply(colValue) == '[object Array]' || Object.prototype.toString.apply(colValue) == '[object Object]') {
    					if (! tools.isGeneralTreeTable(colValue, structure)) {
    						result = false;
    						return false;
    					}
    				}
				});
			});

			return result;
		}
	};


	var loadedAssets = [];
	var extensionDisplays = {};
	var storageMap = {};
	var initialLoad = false;

	zendDevBar.registerResetHandler('extensions-default-tables', function($, data) {
		var response = zendDevBar.customData;
		if (typeof response == 'undefined') {
			return;
		}
		
		$.each(response.zrayExtensions, function(key, extension) {
			$.each(extension.datatypes, function(datatypeKey, datatype) {
			 var dataname = 'zrayExtension:'+extension.extensionName+'/'+datatype.dataname;
			 zendDevBar.getStorage(dataname).reset();
			 zendDevBar.updateLabel(dataname, tools.formatLabel(datatype.dataname) + ' (0)');
			});
		});
	});
	
	zendDevBar.registerCustomDataLoaded('default', 'extensions-default-tables', function($, data) {
			var requestId = data.RequestInfo.id;
			var response = zendDevBar.customData;

			var autogenerateDatatypes = {};
			var assets = [];
			var allMetadata = {};
			var labels = {};

			$.each(response.zrayExtensions, function(key, extension) {
				autogenerateDatatypes[extension.extensionName] = [];
				allMetadata[extension.extensionName] = extension.metadata;

				// set display mode according to the global custom data configurations
				var customDataConfig = zendDevBar.customDataConfig[extension.extensionName];
				if (typeof customDataConfig != 'undefined') {
    				$.each(extension.datatypes, function(datatypeKey, datatype) {
    					if (typeof customDataConfig[datatype.dataname] == 'undefined' || 
    					   (typeof customDataConfig[datatype.dataname] != 'undefined') && customDataConfig[datatype.dataname] === true) {
    						datatype.display = true;
    					} else {
    						datatype.display = false;
    					}
    				});
				}
				
				$.each(extension.datatypes.filter(function(datatype){
					/// collect only datatypes that are to be auto-generated
					return datatype.display;
				}), function(key, datatype){
					/// create an array map for extensions that have datatypes that should be automatically displayed
					autogenerateDatatypes[extension.extensionName].push(datatype.dataname);
				});

				if (extension.metadata.assets) {
					$.each(extension.metadata.assets, function(key, asset){
						asset.extension = extension.extensionName;
						asset.key = key;
						assets.push(asset);
					});
				}
				
				
			});
			
			//assets
			$.each(assets, function(key,asset){
				if ($.inArray(asset.extension + ':' + asset.key, loadedAssets) > -1) {
					/// continue, already loaded
					return ;
				}
				
				$.ajax({
						'url': zendDevBar.baseUrl + '/Z-Ray/loadAsset',
						'data': {
							'requestId': requestId,
							'extension': asset.extension,
							'asset': asset.key
						}
				}).done(function(data, status, request){
					var mime = request.getResponseHeader('content-type');
					if (mime == 'text/html') {
						loadedAssets.push(asset.extension + ':' + asset.key);
						zendDevBar.insertProducer(data);
						zendDevBar.bindClick();
					}
					
				});
			});

			/// clean up old bar buttons
			$.each($('.zdb-toolbar-preview'), function(){
				/// detach events
				$(this).unbind('click');
				$(this).removeData('hover');
			});

			var extensionsData = response.zrayExtensionsData;
			var usedModuleContainers = [];

			/// store extension:datatype data
			var modulesContainer = $($.find('.zdb-modules'));
			var extensionsContainer = $($.find('#custom-panels .zdb-ext-modules'));

			/// autogenerated metadata
			var metadata = $.map(extensionsData.filter(function(extension){
				/// do not autogenerate metadata for datatypes that are not marked to be autogenerated
				return ($.inArray(extension.datatype, autogenerateDatatypes[extension.extensionName]) > -1);
			}), function(extension){
				var header = extension.datatype;
				var label = extension.datatype;
				var dataname = 'zrayExtension:'+extension.extensionName+'/'+extension.datatype;

				if (! storageMap[extension.extensionName]) {
					storageMap[extension.extensionName] = {};
				}
				storageMap[extension.extensionName][extension.datatype] = dataname;

				var cssBaseName = extension.extensionName+'-'+extension.datatype;

				var logo = '';
				if (typeof allMetadata[extension.extensionName] != 'undefined' && typeof allMetadata[extension.extensionName].logo != 'undefined') {
					logo = allMetadata[extension.extensionName].logo;
				}
				
    			return {
        			'extensionName': extension.extensionName,
        			/// data can be a string, an array or a function
        			/// string is datatype literal which retrieves all parameters as-is and stores in dataname
        			/// array is a data array which is stored as-is
        			/// function is a callback that gets all extension datatypes and returns a block of data to be stored as-is 
        			'storage': {'dataname': dataname, 'data': extension.datatype},
        			'panel': { /// panel services
            			'cssBaseName': cssBaseName,
            			'headline': tools.formatLabel(header),
            			'pager': {'storage': dataname}, /// false to disable
            			'search': {'storage': dataname, 'target': 'main-display'} /// false to disable
            		},
        			'button': {
            			'label': tools.formatLabel(label),
            			'logo': logo
         			},
         			'display': [ /// actual display area handling
         			    {
             			   'name': 'main-display',
          			       'type': 'table',
          			       'dataname': dataname,
             			   'width': 4,
             			   'options': {
                 			//   'columns': []
             			   }
             			}
         	        ]
        		};
			});

			var labels = {};
			$(metadata).each(function(key, extension){
				var dataname = extension.storage.dataname;
				var cssBaseName = extension.panel.cssBaseName;

				var moduleClass = 'zsb-' + cssBaseName + '-details';

				var label = extension.button.label;
			    labels[dataname] = label;
				
				/// construct the contents only if this module does not exist
				if ($('.'+moduleClass).length == 0) {
					/// add new panels for each (extension,datatype)
					//if (modulesContainer.find('.'))

					var label = extension.button.label;
					var logo = extension.button.logo;

					if (logo == '') {
						logo = '<div class="zdb-toolbar-icon"></div>';
					} else {
						logo = '<div class="zdb-toolbar-icon" style="margin-right: 5px; background-image: url(data:image/png;base64,' + logo + ')" ></div>';
					}
					
					if (modulesContainer.find('.zdb-extension-panel[data-extension="' + extension.extensionName + '"]').length == 0) {
						var mainExtHtml = $('<div class="zdb-toolbar-entry zdb-extension-panel hidden" data-extension="' + extension.extensionName + '"></div>');
						mainExtHtml.append('<div class="zdb-toolbar-preview" title="' + extension.extensionName + '">' + logo + '<span class="zdb-toolbar-info">' + extension.extensionName + '</span></div>');
						modulesContainer.append(mainExtHtml);
					}
						
					var dataHtmlStub = $('<div class="zdb-toolbar-entry '+moduleClass+'" data-extension=' + extension.extensionName + ' data-name="' + dataname + '"></div>');
					extensionsContainer.append(dataHtmlStub);

					dataHtmlStub.append('<div class="zdb-toolbar-preview" title="' + label + '">' + logo + '<span class="zdb-toolbar-info">&nbsp;</span></div>');
					
					var wrapperClass = 'zsb-' + cssBaseName + '-wrapper';
					var panelClass = 'zsb-' +  cssBaseName + '-panel';
					
					$(extensionsContainer.find('.'+moduleClass)).find('.zdb-toolbar-info').html(label);
	
					var header = extension.panel.headline;

					var pagerHtml = '';
					if (extension.panel.pager) {
						pagerHtml = '<div class="zdb-pull-left">\
    	    				<div class="pager zdb-pager">\
    						<form>\
    							<div class="first zdb-first"></div> <div class="prev zdb-prev"></div>\
    							<div class="next zdb-next"></div> <div class="last zdb-last"></div>\
    							<span class="pagedisplay zdb-pagedisplay"></span>\
    							<select class="pagesize zdb-pagesize pagelimit zdb-pagelimit">\
    								<option value="20">20</option>\
    								<option value="50">50</option>\
    								<option value="100">100</option>\
    								<option value="200">200</option>\
    							</select>\
    						</form>\
    					</div>\
        			</div>';
					}


					var searchHtml = '';
					if (extension.panel.search) {
    					searchHtml = '<li class="zdb-toolbar-search">\
    						<div class="zdb-search-wrapper">\
    						<input type="text" name="zdb-toolbar-input-search" id="zdb-toolbar-input-search" class="zdb-toolbar-input zdb-toolbar-input-search" data-column="all" />\
    						<div class="zdb-search-clear hidden" title="Clear">x</a>\
    					</div>\
    				</li>';
					}

					var expandTree = '';
					if (true) {
						expandTree = '<li>\
    						<span class="zdb-expand-tree" onclick="zendDevBar.expandTreeTableRows(this)">Expand all</span>\
        				</li>';
					}

					var displayWrappers = $.map(extension.display, function(display){
						var wrapperTableClass = 'zsb-' + cssBaseName + '-' + display.type + '-wrapper';
						return '<div class="zdb-col-' + display.width + ' '+wrapperTableClass+' zdb-entries-table-wrapper zdb-adaptive-height"></div>';
					});

					var headerLogo = extension.button.logo;

					if (headerLogo == '') {
						headerLogo = '<h1>' + header + '</h1>';
					} else {
						headerLogo = '<h1 style="background-image: url(data:image/png;base64,' + headerLogo + ')">' + header + '</h1>';
					}

					var headerHtml = '<div class="zdb-toolbar-detail '+wrapperClass+'">\
						<div class="zdb-row zdb-toolbar-detail-header">\
							<div class="zdb-col-1">' + headerLogo + '</div>\
							<div class="zdb-col-3">\
							    ' + pagerHtml + '\
							    <div class="zdb-pull-right">\
				    				<ul class="zdb-toolbar-items zdb-horizontal">\
				    			        ' + expandTree + '\
				    			        ' + searchHtml + '\
				    					<li class="zdb-toolbar-pin">\
				    						<div class="zdb-popup-pin" onclick="zendDevBar.unpin()"></div>\
				    					</li>\
				    				</ul>\
				    			</div>\
				    		</div>\
							<div class="zdb-row zdb-panel '+panelClass+'">\
				    			' + displayWrappers.join("\n") + '\
				    		</div>\
						</div>\
					</div>';
					dataHtmlStub.append(headerHtml);

					var defaultColumns = [];

					var createFlag = false;
				    $.each(extension.display, function(key, display) {
					    
				    	var wrapperTableClass = 'zsb-' + cssBaseName + '-' + display.type + '-wrapper';
					    if ( ! display.type || display.type == 'table') {
        					if (! extensionDisplays[extension.extensionName]) {
	        					extensionDisplays[extension.extensionName] = {};
        					}

        					if (! extensionDisplays[extension.extensionName][extension.storage.data]) {
            					var mainTable;
            					
	        					extensionDisplays[extension.extensionName][extension.storage.data] = {};
	        					// is tree table
	        					var data = zendDevBar.parametersMap[extension.extensionName][extension.storage.data];
	        					if (tools.isTreeTable(data) === false) {
	        					    createFlag = true;
	        					    mainTable = zendDevBar.createTable(zendDevBar.getStorage(dataname), $zendDevBar('.'+wrapperTableClass));
	        					} else {
		        					var treeTableStorage = zendDevBar.getStorage(dataname);
	        						mainTable = zray.createTreeTable(treeTableStorage, $zendDevBar('.'+wrapperTableClass));	  
	        					}
						        var displayOptions = {'columns': defaultColumns, 'stickyHeader': true};
	        					mainTable.setOptions(displayOptions);
	        					
	        					extensionDisplays[extension.extensionName][extension.storage.data][key] = mainTable;
        					}
					    }
					});

				    if (createFlag) {
						if (extension.panel.pager) {
	    					new $zendDevBar.zdbPager(zendDevBar.getStorage(extension.panel.pager.storage), $zendDevBar('.'+wrapperClass + ' .zdb-pager').first());
						}
	
						$zendDevBar('.'+wrapperClass + ' .zdb-expand-tree').remove();
				    } else {
				    	$zendDevBar('.'+wrapperClass + ' .zdb-pager').remove();
				    }

					if (extension.panel.search) {
    					new $zendDevBar.zdbSearch(zendDevBar.getStorage(extension.panel.search.storage), $zendDevBar('.'+wrapperClass + ' .zdb-toolbar-input-search').first(), 
    	    					extensionDisplays[extension.extensionName][extension.storage.data][extension.panel.search.target]);
					}
			    
				}
				
				usedModuleContainers.push(moduleClass);
			});

			/// cleanup unused modules
			$.each($('div.zdb-toolbar-entry[data-name^="zrayExtension"]'), function(key, entry){
				var moduleFound = false;
				$.each(usedModuleContainers, function(idx, moduleName){
					if (entry.classList.contains(moduleName)) {
						moduleFound = true;
						return false;
					}
				});

				if (! moduleFound) {
					$(entry).addClass('hidden');
				} else {
					$(entry).removeClass('hidden');
				}
			});

			/// rebind all clicks
			zendDevBar.bindClick();

			  
		$.each(zendDevBar.parametersMap, function(extensionName, datatypes){
			$.each(datatypes, function(dataname, parametersMap){
				if (typeof extensionDisplays[extensionName] == 'undefined' || typeof extensionDisplays[extensionName][dataname] == 'undefined') {
					return;
				}

				if (parametersMap.length == 1 && typeof parametersMap[0] == 'string') {
					parametersMap = [{value: parametersMap[0]}];
				}

				if ((parametersMap[0] && typeof parametersMap[0] == 'object')) {
    					defaultColumns = $.map(parametersMap[0], function(item, key){
        					if (key == '__row_index') {
            					return;
        					}
        					
    						return {
    	         				label: key,
    	     					propertyName: key,
    	     					attributes: {'class': 'zdb-ellipsis'},
    	     					sortable: true
    	         			};
    					});
				}

				var keysLength = (Object.keys(parametersMap)).length;
				if (typeof defaultColumns != 'undefined') {
				    extensionDisplays[extensionName][dataname][0].setColumns(defaultColumns);
				}

				if (tools.isTreeTable(parametersMap) !== false) {
					if (keysLength == 1) {
				    	keysLength = (Object.keys(parametersMap[0])).length;
				    	if (typeof parametersMap[0]['__row_index'] != 'undefined') {
				    		keysLength--;
				    	}
				    }
				}

				var storageName = storageMap[extensionName][dataname];
				zendDevBar.updateLabel(storageName, labels[storageName] + ' (' + keysLength + ')');

				zendDevBar.getStorage(storageName).setData(parametersMap);
			});
		});

		if (! initialLoad) {
			  initialLoad = true;
			  zendDevBar.loadModuleFromCookie();
			  zendDevBar.applyCookieParams();
		}
	});
})();
</script>